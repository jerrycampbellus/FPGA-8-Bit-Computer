// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.


// Generated by Quartus Prime Version 18.1 (Build Build 625 09/12/2018)
// Created on Sun Nov 28 21:13:31 2021

JC_Display JC_Display_inst
(
	.Display_CLK(Display_CLK_sig) ,	// input  Display_CLK_sig
	.A_Register(A_Register_sig) ,	// input [7:0] A_Register_sig
	.B_Register(B_Register_sig) ,	// input [7:0] B_Register_sig
	.ALU(ALU_sig) ,	// input [7:0] ALU_sig
	.CPU_Flags(CPU_Flags_sig) ,	// input [7:0] CPU_Flags_sig
	.Memory_Address_Register(Memory_Address_Register_sig) ,	// input [3:0] Memory_Address_Register_sig
	.RAM(RAM_sig) ,	// input [7:0] RAM_sig
	.Program_Counter(Program_Counter_sig) ,	// input [3:0] Program_Counter_sig
	.CPU_Output(CPU_Output_sig) ,	// input [15:0] CPU_Output_sig
	.Data_Bus(Data_Bus_sig) ,	// input [7:0] Data_Bus_sig
	.Control_Flags(Control_Flags_sig) ,	// input [15:0] Control_Flags_sig
	.Instruction_Register(Instruction_Register_sig) ,	// input [7:0] Instruction_Register_sig
	.JC_OUPUT_SELECT(JC_OUPUT_SELECT_sig) ,	// input [4:0] JC_OUPUT_SELECT_sig
	.JC_LED_OUTPUT(JC_LED_OUTPUT_sig) ,	// output [7:0] JC_LED_OUTPUT_sig
	.JC_7SEG_OUPUT_0(JC_7SEG_OUPUT_0_sig) ,	// output [7:0] JC_7SEG_OUPUT_0_sig
	.JC_7SEG_OUPUT_1(JC_7SEG_OUPUT_1_sig) ,	// output [7:0] JC_7SEG_OUPUT_1_sig
	.JC_7SEG_OUPUT_2(JC_7SEG_OUPUT_2_sig) ,	// output [7:0] JC_7SEG_OUPUT_2_sig
	.JC_7SEG_OUPUT_3(JC_7SEG_OUPUT_3_sig) ,	// output [7:0] JC_7SEG_OUPUT_3_sig
	.JC_7SEG_OUPUT_4(JC_7SEG_OUPUT_4_sig) ,	// output [7:0] JC_7SEG_OUPUT_4_sig
	.JC_7SEG_OUPUT_5(JC_7SEG_OUPUT_5_sig) 	// output [7:0] JC_7SEG_OUPUT_5_sig
);

